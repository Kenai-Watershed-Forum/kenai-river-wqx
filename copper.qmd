# Copper

---
execute:
  echo: false
date: "`r Sys.Date()`"
format:
  html:
    code-fold: true
    code-tools: true
    code-summary: "Show the code"
---

Typically present in surface waters, naturally low concentrations of copper are essential as micronutrients for plants and animals, but elevated levels can be toxic to certain aquatic species (USEPA, 2007). Concentrations of copper can increase in surface waters due to discharges from mining, the leather industry, electrical equipment, and fabricated metal products (USEPA, 2007). Copper is present in the brake pads of vehicles and can enter surface waters in storm water runoff (USEPA, 2015). The standard for copper set by the ADEC, ranges from 1.75 μg/L to 29.28 μg/L, depending on hardness, for chronic exposure to aquatic life in freshwater (see Appendix X) (ADEC 2008).

The highest concentration of copper in the mainstem was reported at \_\_\_\_\_ μg/L at \[site\] in \[season/year\], and the lowest levels were below the MDL of \_\_\_\_ μg/L. In the summer, \_\_\_\_ exceedances occurred at \[sites\], and copper concentrations exceeded the criteria during individual sampling dates at \[sites\]. Higher levels occurred \_\_\_\_, while the lowest concentrations were detected at \_\_\_\_. \[Were exceedances were recorded for the mainstem during the sampling events in spring/summer?\]. Copper concentrations in the tributaries ranged from \_\_\_ μg/L in the \[site/year\] to below the MDL of \_\_\_ μg/L that occurred in many locations during this project. Exceedances in the spring occurred at..... Exceedances in the summer occurred at ....

```{r echo = F, warning=FALSE, message=FALSE,fig.height=10}

# set parameter
parameter <- "Copper"

# source static regulatory criteria boxplot function
source("functions/static_boxplot_function_new.R")
#make_boxplot(param = parameter)


create_facet_plots(data,reg_vals,"Copper")

# source calculated regulatory criteria plot(s) function


# source table download function
source("functions/table_download.R")
download_tbl(param = parameter)





# working with variations here 1/28/2025
library(ggplot2)
library(dplyr)

# Function to generate two ggplots
create_facet_plots <- function(data_path, reg_vals_path, characteristic) {
  # Read the datasets
  data <- read.csv(data_path, stringsAsFactors = FALSE)
  reg_vals <- read.csv(reg_vals_path, stringsAsFactors = FALSE)

  # Dynamically filter regulatory values for the given characteristic_name
  reg_values <- reg_vals %>% filter(characteristic_name == characteristic)

  # Handle case where characteristic_name is not found
  if (nrow(reg_values) == 0) {
    stop("No regulatory values found for the given characteristic_name.")
  }

  # Prepare hline data for multiple standards
  hline_data <- reg_values %>% select(yintercept = value, linetype = Standard)

  # Get unique river_mile values
  unique_river_miles <- unique(data$river_mile)

  # Filter and preprocess the main data
  preprocess_data <- function(x_var_filter) {
    data %>%
      filter((x_var_filter == "tributary_name" & trib_mainstem != "m") | (x_var_filter == "river_mile" & trib_mainstem != "t")) %>%
      mutate(
        tributary_name = factor(
          tributary_name,
          levels = c(
            "No Name Creek",
            "Beaver Creek",
            "Slikok Creek",
            "Soldotna Creek",
            "Funny River",
            "Moose River",
            "Killey River",
            "Russian River",
            "Juneau Creek"
          )
        ),
        river_mile = factor(river_mile, levels = sort(unique_river_miles))
      ) %>%
      filter(characteristic_name == characteristic) %>%
      mutate(
        result_measure_value = as.numeric(result_measure_value),  # Ensure numeric
        fw_acute_exceed = ifelse(is.na(fw_acute_exceed), NA, fw_acute_exceed),
        fw_chronic_exceed = ifelse(is.na(fw_chronic_exceed), NA, fw_chronic_exceed),
        season = as.factor(season)  # Ensure season is categorical
      ) %>%
      filter(!is.na(result_measure_value))  # Remove rows with NA values
  }

  # Create plots for tributary_name and river_mile
  create_plot <- function(subset_data, x_var) {
    y_min <- min(subset_data$result_measure_value, na.rm = TRUE) * 0.9
    y_max <- max(subset_data$result_measure_value, na.rm = TRUE) * 1.1

    ggplot(subset_data, aes(x = get(x_var), y = result_measure_value)) +
      geom_boxplot(aes(group = get(x_var)), outlier.shape = NA) +
      geom_jitter(aes(
        color = factor(case_when(
          is.na(fw_acute_exceed) & is.na(fw_chronic_exceed) ~ "gray",
          is.na(fw_acute_exceed) & fw_chronic_exceed == "Y" ~ "orange",
          fw_acute_exceed == "Y" & fw_chronic_exceed == "Y" ~ "blue"
        )),
        shape = factor(case_when(
          is.na(fw_acute_exceed) & is.na(fw_chronic_exceed) ~ "gray",
          is.na(fw_acute_exceed) & fw_chronic_exceed == "Y" ~ "orange",
          fw_acute_exceed == "Y" & fw_chronic_exceed == "Y" ~ "blue"
        ))
      ), width = 0.2, size = 3, show.legend = TRUE) +
      geom_hline(data = hline_data, aes(yintercept = yintercept, linetype = linetype), color = "#D55E00", size = 1.2, show.legend = TRUE) +
      facet_wrap(~season) +
      scale_y_continuous(limits = c(y_min, y_max)) +
      scale_color_manual(
        breaks = c("gray", "orange", "blue"),
        breaks = c("gray", "orange", "blue"),
        name = "Hardness Dependent
Exceedance Type",
        labels = c("gray" = "None", "orange" = "Acute", "blue" = "Chronic"),
        values = c(
          "gray" = "#7F7F7F",    # Gray for None (colorblind-friendly neutral gray)
          "orange" = "#E69F00",  # Orange for Acute (colorblind-friendly orange)
          "blue" = "#0072B2"      # Blue for Chronic (colorblind-friendly blue)
        )
        values = c(
          "gray" = "darkgray",    # Acute: NA, Chronic: NA
          "orange" = "orange",    # Acute: NA, Chronic: Y
          "blue" = "blue"         # Acute: Y, Chronic: Y
        )
      ) +
      scale_shape_manual(
        breaks = c("gray", "orange", "blue"),
        breaks = c("gray", "orange", "blue"),
        name = "Exceedance Type",
        labels = c("gray" = "None", "orange" = "Acute", "blue" = "Chronic"),
        values = c(
          "gray" = 16,    # Acute: NA, Chronic: NA
          "orange" = 16,    # Acute: NA, Chronic: Y
          "blue" = 8      # Acute: Y, Chronic: Y
        )
      ) +
      scale_linetype_manual(
        name = "Regulatory Standard",
        values = c(
          "drinking_water" = "solid",
          "irrigation_water" = "longdash",
          "stock_water" = "dotted",
          "wildlife" = "twodash",
          "recreation" = "dotdash"
        )
      ) +
      guides(
        linetype = guide_legend(override.aes = list(color = "red", size = 1.2)),
        color = guide_legend(override.aes = list(size = 4, linetype = 0)),
        shape = guide_legend(override.aes = list(size = 4, linetype = 0))
      ) +
      theme_minimal() +
      labs(
        title = paste(x_var, "vs Result Measure Value for", characteristic),
        x = x_var,
        y = "Result Measure Value"
      ) +
      theme(
        axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
        axis.text.y = element_text(size = 14),
        axis.title = element_text(size = 16),
        strip.text = element_text(size = 16, face = "bold"),
        legend.text = element_text(size = 14),
        legend.title = element_text(size = 16),
        legend.position = "right"
      )
  }

  # Generate plots
  tributary_data <- preprocess_data("tributary_name")
  river_mile_data <- preprocess_data("river_mile")

  plot_tributary <- create_plot(tributary_data, "tributary_name")
  plot_river_mile <- create_plot(river_mile_data, "river_mile")

  return(list(tributary_plot = plot_tributary, river_mile_plot = plot_river_mile))
}

# Test the function with actual datasets
data_path <- "/mnt/data/baseline_analysis_format.csv"
reg_vals_path <- "/mnt/data/reg_vals.csv"
plots <- create_facet_plots(data_path, reg_vals_path, "Copper")
print(plots$tributary_plot)
print(plots$river_mile_plot)










```

i would like to develop a function in r that generates and arranges two ggplots with two facets each, then displays them along with a single combined legend for everything. the function should be able to generate a seperate set of faceted ggplots for each unique string in the column "characteristic_name".

an example dataset is attached as baseline_analysis_format.csv. the final graphic will have the following features: 1) each ggplot is faceted by the column "season". 2) for the first ggplot, the x axis is tributary_name and the y axis is result_measure_value. 3) for the 2nd ggplot, the x axis is river_mile and the y axis is result_measure_value. 4) the values will be visualized as geom_boxplot along with geom_jitter superimposed on the boxplots. 5) the plots will incorporate a geom_hline from a seperate dataset, and example of which is attached here (reg_vals.csv). 6) the color and shape of each point in geom_jitter will vary by other columns, to be later specified

please help lead through the process slowly of designing this ggplot function. i have attempted this already, and successfully produced by desired outcome, with one critical exception: the legend displays extraneous symbols. i want to start over here, with the goal of making sure i do not end up in the same dead end again
