---
title: "boxplot_test"
---

```{r}
# specify parameter
parameter <- "Zinc"


# load packages
library(tidyverse)
library(lubridate)
library(readr)
library(readxl)
library(writexl)
library(hms)
library(DT)
library(openxlsx)
library(DT)
library(ggpubr)
library(plotrix)
library(remotes)
library(magrittr)
library(janitor)
library(xfun)
library(cowplot)
library(forcats)
library(magrittr)
library(plotly)

# Set longitudinal order for tributaries
trib_order <- c("No Name Creek",
                "Beaver Creek",
                "Slikok Creek",
                "Soldotna Creek",
                "Funny River",
                "Moose River",
                "Killey River",
                "Russian River",
                "Juneau Creek")


#### READ IN WQX DATA #####
# read in prepared data from local directory.
# for most parameter types, read in data directly downloaded from EPA WQX.

# note that we are reading in "analysis_format" rather than "export_format", which is in the same directory
# the "export_format" dataframe has been made less granular and is thus not uploaded to EPA WQX. The following was performed on the
# "analysis_format" version: 1) Aggregate all organic volatiles to BTEX in cases where individual volatiles data was provided
dat <- read.csv("other/output/analysis_format/baseline_analysis_format.csv")
                




#### READ IN Regulatory Threshold Values ####
# read in and combine various static reg values

# static metals threshold values
static_metals_reg_vals <- read.csv("other/input/regulatory_limits/formatted_reg_vals/static_metals_reg_vals.csv")

# hydrocarbons reg vals

# field parameters threshold values
ph_reg_vals <- read.csv("other/input/regulatory_limits/formatted_reg_vals/ph_reg_vals.csv")



# join all static regulatory value dataframes
# old: reg_vals <- static_metals_reg_vals
reg_vals <- bind_rows(static_metals_reg_vals,ph_reg_vals)



#### PREPARE PLOT #####

## define horizontal line positions for regulatory limits
hline_data <- reg_vals %>%
  filter(characteristic_name == parameter) 

# how to incorporate other reg vals here (N & P, bacteria, hydrocarbons, etc)

# plan
# 1.) develop lists of all STATIC reg limits. gather together into same DF here, w/ column for name type of limit
# 2.) re-knit doc each time new category is added
# 3.) develop separate calculated box plot for all non-static values

# WORKING HERE 11/27/23



# will need a step here to convert units to make reg value match parameter vals?

# Describe Overall Boxplot function


make_boxplot1 <- function(param) {
  
  # create data table for a single parameter
  parameter_dat <- dat %>%
    filter(characteristic_name == param) %>%
    mutate(tributary_name = factor(tributary_name, levels = trib_order)) %>%
    # join regulatory values
    left_join(reg_vals, by = "characteristic_name")
  
  # get unit for parameter
  unit <- unique(parameter_dat$result_measure_measure_unit_code)
  
  # set min and max time extent
  min_year <- as.character(min(year(parameter_dat$activity_start_date)))
  max_year <- as.character(max(year(parameter_dat$activity_start_date)))

  # tribs plot
  p_trib <- parameter_dat %>%
    ggplot() +
    facet_grid(.~season) +
    geom_boxplot(aes(factor(tributary_name), result_measure_value)) +
    geom_jitter(aes(factor(tributary_name), result_measure_value, color = fw_acute_exceed), width = 0.1) +
    ylab(paste0(param, " (", unit, ")")) +
    xlab("Site") +
    theme(axis.text.x = element_text(angle = 90)) +
    geom_hline(data = hline_data,
               aes(yintercept = value, linetype = Standard, color = Standard))

  # mainstem plot
  p_ms <- parameter_dat %>%
    ggplot() +
    facet_grid(.~season) +
    geom_boxplot(aes(factor(as.numeric(river_mile)), result_measure_value)) +
    geom_jitter(aes(factor(as.numeric(river_mile)), result_measure_value, color = fw_acute_exceed), width = 0.1) +
    ylab(paste0(param, " (", unit, ")")) +
    xlab("River Mile") +
    geom_hline(data = hline_data,
               aes(yintercept = value, linetype = Standard, color = Standard))

  # Final ggplotly outputs
  tribs_plot <- ggplotly(p_trib + 
    ggtitle(paste(param, "in Kenai River Tributaries", min_year, "to", max_year)))

  mainstem_plot <- ggplotly(p_ms +
    ggtitle(paste(param, "in Kenai River Mainstem", min_year, "to", max_year)))

  # Return both plots as a list
  list(tribs = tribs_plot, mainstem = mainstem_plot)
}





# make geom_point symbology different for exceedences

## metals:
### acute exceedence: color A
### chronic exceedence: color B
### do we need different plot functions for this type of display vs where thresholds are just static?

# make plotly appear on html render, jpg on docx render


```

