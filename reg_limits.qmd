# Regulatory Limits

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

```{r packages, echo = F, warning=FALSE, message=FALSE}

# clear environment
rm(list=ls())

# load packages
library(tidyverse)
library(janitor)
library(readxl)
library(xfun)
```

We calculated regulatory limits based on freshwater quality standards listed from state and/or federal regulatory agencies. Some regulatory threshold values are static and do not depend on additional environmental parameters, while some threshold values depend on local conditions like hardness, temperature, or pH.

We discuss how various parameters are assessed against standards below.

## Metals

### Metals with Static Regulatory Threshold Values

The metals parameters in the downloadable table below have *static* thresholds assigned.

[Static regulatory values are represented as solid horizontal lines in the chapters that follow.]{.underline} (to do: show graphic example of values above horizontal line here) 

```{r echo = F}

# read in reg threshold values for metals with static values ###
static_metals_reg_vals <- read_xlsx("other/input/regulatory_limits/master_reg_limits.xlsx", sheet = "static_regulatory_values") %>%
  filter(!is.na(agency),
         standard_type %in% c("drinking_water","irrigation_water","stock_water")) %>%
  remove_empty() %>%
  select(parameter_baseline_name,standard_type,reg_value,reg_unit) %>%
  pivot_wider(names_from = standard_type, values_from = reg_value) %>%
  rename(characteristic_name = parameter_baseline_name) %>%
  pivot_longer(cols = ends_with("water"), names_to = "standard", values_to = "value") %>%
  rename("Standard" = "standard")

# define directory
dir <- "other/input/regulatory_limits/formatted_reg_vals/static_metals_reg_vals.csv"

# export csv
write.csv(static_metals_reg_vals, dir, row.names = F)

# make table viewable
embed_file(dir, text = "Download Regulatory Limits for Metals with Static Regulatory Threshold Values")
```
 
```{r}
# read in static reg values in wide format
static_metals_reg_vals <- read_xlsx("other/input/regulatory_limits/master_reg_limits.xlsx", sheet = "static_regulatory_values") %>%
  filter(static_category == "static_metals",
         standard_type %in% c("drinking_water","irrigation_water","stock_water")) %>%
  remove_empty() %>%
  select(parameter_baseline_name,standard_type,reg_value,reg_unit,agency,source) %>%
  pivot_wider(names_from = standard_type, values_from = reg_value) %>%
  rename(characteristic_name = parameter_baseline_name,
         reg_agency = agency,
         reg_agency_source = source) 

# source formatted data
dat <- read.csv("other/output/analysis_format/baseline_export_format.csv")
  

# join static regulatory values to parameter results, and identify when/where exceedences occur
static_metals_thresholds <- left_join(dat,static_metals_reg_vals) %>%
  mutate(drinking_water_exceed = case_when(
    drinking_water >= result_measure_value ~ "Y")) |>
  mutate(stock_water_exceed = case_when(
    stock_water >= result_measure_value ~ "Y")) |>
  mutate(irrigation_water_exceed = case_when(
    irrigation_water >= result_measure_value ~ "Y")) 

```

### Metals with Hardness-Dependent Regulatory Values

Some regulatory values for metals are not simple static values, and are instead hardness-dependent (i.e. toxicity depends on calcium (Ca) and magnesium (Mg) concentrations). The metals parameters in the downloadable table below have *hardness-dependent* thresholds assigned.

```{r}


# hardness-dependent criteria
# see page 29 of "Alaska Water Quality Criteria Manual for Toxic and other Deleterious Organic and Inorganic Substances" for parameters and formulas

# read in parameters which have hardness dependent criteria
diss_metals_hard_param <- read_excel("other/input/regulatory_limits/master_reg_limits.xlsx", skip = 1, sheet = "diss_metals_hard_parameters") %>%
  remove_empty() %>%
  select(-parameter_agency_name) %>%
  filter(!is.na(characteristic_name),
         !is.na(m_a))

# make downloadable list metals which have calculated parameters
dir <- "other/input/regulatory_limits/formatted_reg_vals/calculated_metals_list.csv"
write.csv(diss_metals_hard_param,dir, row.names = F)
embed_file(dir, text = "Download List of Metals with Hardness-Dependent Regulatory Threshold Values")

```

<br>

Hardness varies by site, by season, and with hydrologic conditions. We calculated hardness according to the following formula:

::: {.callout-note appearance="simple"}
Hardness = 2.497(Total Calcium in mg/L) + 4.119(Total Magnesium in mg/L)
:::

For sampling events with duplicate samples, we calculated average hardness. Note that some sampling events do not have calculated hardness  values because total Ca and/or total Mg values were not available.

```{r echo = F, warning=FALSE, message=FALSE}

# calculate hardness for all sample events in project history with available Ca and Mg data

# confirm source for analysis-formatted data
dat <- read.csv("other/output/analysis_format/baseline_export_format.csv")

# calculate hardness column  

hard <- dat %>%
  select(activity_identifier, activity_start_date, characteristic_name, result_measure_value, result_measure_measure_unit_code,result_sample_fraction_text,monitoring_location_name) %>%
  filter(characteristic_name %in% (c("Magnesium","Calcium"))) %>%
  
  # retain only total Ca and Mg, not dissolved values
  filter(result_sample_fraction_text %in% (c("Total Recoverable","Unfiltered"))) %>%
  
  group_by(activity_start_date, monitoring_location_name, characteristic_name, result_measure_measure_unit_code) %>%
  
  # 2021 data has characteristic names in activity_identifier column fyi, observations prior to 2013 do not
  
  # get mean of all duplicate samples
  summarise(avg_value = mean(result_measure_value)) %>%
  pivot_wider(names_from = "characteristic_name", values_from = "avg_value") %>%
  # calculate hardness for each sample event
  mutate(hardness_mgl = 2.497*(Calcium) + 4.119*(Magnesium)) %>%
  ungroup() %>%
  select(-Calcium, -Magnesium,-result_measure_measure_unit_code)

# join hardness back to overall dataset
dat <- full_join(dat,hard,by = c("activity_start_date","monitoring_location_name")) 

# for the sampling events where hardness values are missing, why? presumably becuase total Ca and/or Mg values are missing. Confirm that this is the case. If "characteristic_name" does not include paired observations of Mg or Ca in 'hard_missing', than this is the case
hard_missing <- dat %>%
  filter(is.na(hardness_mgl)) %>%
  distinct(activity_identifier, .keep_all = T) %>%
  filter(characteristic_name %in% c("Calcium","Magnesium"))

# TO DO HERE: make sure that outlier/incorrect hardness values are not being applied in dissolved metals toxicity calculations


# spent inordinate time debugging the following join issue here: we can't include hardness units as a join column becuase some parameters have units other than mg/l

# export hardness joined to overall data results
dir <- "other/output/hardness/dat_hardness.csv"
write.csv(dat, dir, row.names = F)

# make hardness data downloadable
xfun::embed_file(dir, name = "Kenai River Baseline Hardness Data")

```

<br>

#### Acute and Chronic Hardness-Dependent Regulatory Threshold Values

Separate hardness-dependent standards often apply for acute vs. chronic metals toxicity.

We calculated hardness-dependent regulatory criteria based on formulas published on the Alaska Department of Environmental Conservation's Water Quality Standards Section website (<https://dec.alaska.gov/water/water-quality/standards/>). The "Alaska Water Quality Criteria Manual for Toxic and other Deleterious Organic and Inorganic Substances" (2022) document, along with the "Inorganic Toxics Criteria Worksheet" provide parameter-specific formulas for many substances.

Hardness-dependent criteria is calculated from the following formula for metals in freshwater:

::: {.callout-note appearance="simple"}
Acute (dissolved) = exp{mA\[ln(hardness)\]+ bA} (CF) Chronic (dissolved) = exp{mC \[ln(hardness)\] + bC} (CF)
:::

where mA, bA, mC, and bC are numerical parameters specific to each substance, and CF is the conversion factor for acute vs. chronic criteria.

These values are graphically displayed in the following chapters. Rather than juxtaposed against static horizontal lines, instead they are highlighted by shape or color when the calculated threshold is exceeded; specific to that sampling event's hardness conditions. See **figure X** for an example

**(to do: show graphic example of values above threshold as colored asterisks here)**

```{r echo = F}

# define metals with hardness dependent criteria
metals_hcrit <- c("Cadmium","Chromium","Copper","Lead","Nickel","Silver","Zinc")

# reduce overall dataset to just metals with hardness-dependent parameters
dat_metals_hard_dependent <- dat %>%
  filter(characteristic_name %in% metals_hcrit)

# join hardness-dependent calculation parameters to overall dataset
hardness_dependent_metals_thresholds <- full_join(dat_metals_hard_dependent, diss_metals_hard_param, by = "characteristic_name") %>%

  # Calculate hardness dependent criteria values
  
  ## ACUTE ##
  mutate(fw_acute_std = case_when(
    # cadmium
    characteristic_name == "Cadmium" ~ exp(m_a*log(hardness_mgl) + b_a) * (1.136672 - ((log(hardness_mgl)*0.041838))),
    # lead
    characteristic_name == "Lead" ~ exp(m_a*log(hardness_mgl) + b_a) * (1.46203 - ((log(hardness_mgl)*0.145712))),
    # all other acute hardness-dependent criteria
    .default = exp(m_a*log(hardness_mgl) + b_a)
  )) %>%
  
  ## CHRONIC ##
  mutate(fw_chronic_std = case_when(
    # cadmium
    characteristic_name == "Cadmium" ~ exp(m_c*log(hardness_mgl) + b_c) * (1.101672 - ((log(hardness_mgl)*0.041838))),
    # lead 
    characteristic_name == "Lead" ~ exp(m_c*log(hardness_mgl) + b_c) * (1.46203 - ((log(hardness_mgl)*0.145712))),
    # all other hardness-dependent criteria
    .default = exp(m_c*log(hardness_mgl) + b_c))) %>%
  
# retain and rename needed columns
# select(characteristic_name, activity_start_date,result_sample_fraction_text,result_measure_value,result_measure_measure_unit_code)

#trib_mainstem, tributary_name, site_name, season, fw_acute_std, fw_chronic_std) %>%
  
  
# note that all dissolved metals units are in ug/l, and all hardness units are in mg/l; as provided in the ADEC spreadsheet referenced earlier in this document (toxicsbook-adec-wqstandards-01-11-24)
  
  # calculate when exceedences occur
  ## acute
  mutate(fw_acute_exceed = case_when(
    result_measure_value >= fw_acute_std ~ "Y")) %>%
  
  ## chronic
  mutate(fw_chronic_exceed = case_when(
    result_measure_value >= fw_chronic_std ~ "Y")) 

# note: there is certainly a cleaner way to code the above, but for now am just reflecting the formula format as provided in the ADEC manual.


# define directory
dir <- "other/input/regulatory_limits/formatted_reg_vals/calculated_metals_reg_vals.csv"

# write csv of results
write.csv(hardness_dependent_metals_thresholds, dir, row.names = F)

# make csv downloadable
embed_file(dir, text = "Hardness Dependent Regulatory Thresholds for Metals - Kenai River Baseline Water Quality")

# it appears that export from EPA WQX of 2000 - 2014 data does not include status of samples as DUP or Trip Blank. Are results included at all? Also note that from Summer 2022 - present we are also using field blanks

# join hardness info and calculations and results back to verall dataframe
dat <- left_join(dat,hardness_dependent_metals_thresholds)


# note: the data visualization boxpot function filters out any "rejected" results
```

```{r}
# possible general approach for graphic plots: export sheets of static and hardness-dependent results; use this to intake for all figures
```

<br>

## Hydrocarbons

Note: the 2016 baseline report presents hydrocarbon data chapters structured as follows:

-   Diesel Range Organics

-   Gasoline Range Organics

-   Residual Range Organics

However, as of `r Sys.Date()` it is unclear which specific hydrocarbon parameters, or grouped sums of hydrocarbon parameters, have equivalent names in our data set downloaded from the EPA WQX. As a result, in this report we will structure data to simply assess BTEX values against the ADEC regulatory standard. There may be federal standards that also apply to hydrocarbons, to be addressed later.

```{r echo = F}

# prepare static threshold reg value for BTEX
hydrocarbon_reg_vals <- read_xlsx("other/input/regulatory_limits/master_reg_limits.xlsx", sheet = "static_regulatory_values") %>%
  filter(static_category == "hydrocarbons") %>%
  remove_empty() %>%
  select(parameter_baseline_name,standard_type,reg_value,reg_unit) %>%
  pivot_wider(names_from = standard_type, values_from = reg_value) %>%
  rename(characteristic_name = parameter_baseline_name) %>%
  pivot_longer(cols = ends_with("water"), names_to = "standard", values_to = "value") %>%
  rename("Standard" = "standard") %>%
  filter(!is.na(value)) %>%
  select(-"NA")

# define directory for where hydrocarbon reg values are saved
dir <- "other/input/regulatory_limits/formatted_reg_vals/hydrocarbon_reg_vals.csv"

# export csv
write.csv(hydrocarbon_reg_vals, dir, row.names = F)

# make table viewable
embed_file(dir, text = "Download Regulatory Limits for Hydrocarbons with Static Regulatory Threshold Values")

```

### Total BTEX

Total aromatic hydrocarbons (TAH) means the sum of the following volatile monoaromatic hydrocarbon compounds: benzene, toluene, ethylbenzene, and the xylene isomers, commonly called BTEX. The Alaska Dept of Environmental Conversation describes a maximum static regulatory value of 10 ug/l BTEX.

For each sampling event with available hydrocarbons data, we calculated the sum of the parameters that compose BTEX and compared them to a static threshold value.

To prepare our existing data to be assessed against this standard, we addressed the following issues:

-   In some cases, BTEX data is quantified as a total mixture (sum of all benzene, toluene, ethylbenzene, and the xylene isomers). In other cases, the individual substances are instead quantified separately.

-   In yet other cases, both the values of individual components of BTEX and the total mixture values are reported separately.

-   To create a consistent parameter, we summed the total quantities of benzene, toluene, ethylbenzene, and xylene by unique sampling event (unique location/time) when it had not already been reported as such.

-   In some cases, multiple isomers of the same hydrocarbon are quantified (e.g. o-xylene vs m,p-xylene). In these cases, we summed the total quantity of the substance for all isomers.

```{r echo = F}

# Goal here: replace old volatiles data in the overall dataframe with the aggregagated btex data we discussed above. 

# specify isomers to be aggregaed into single compound
xylene_isomers <- c("m,p-Xylene" = "Xylene","o-Xylene" = "Xylene")

# summarise btex characteristic_name because it is long and cumbsersome

# 1.) aggregate all volatiles data to sum into "`Benzene, toluene, ethyl benzene, xylenes mix"
btex_dat <- dat %>%
  filter(result_sample_fraction_text == "Volatile") %>%
  
  select(activity_identifier,characteristic_name,result_measure_value) %>%
  # round all values to two decimals
  mutate(result_measure_value = round(result_measure_value,2)) %>%
    # if duplicate samples exist, take their average
  group_by(activity_identifier,characteristic_name) %>%
  summarise(result_measure_value = mean(result_measure_value)) %>%
   # restructure dataframe
  pivot_wider(names_from = "characteristic_name", values_from = "result_measure_value") %>%
  mutate(btex_sum = sum(Benzene,Ethylbenzene,Toluene,Xylene,`o-Xylene`,`m,p-Xylene`, na.rm = T)) %>%
  # does the reported sum match the calculated sum?
  mutate(match = case_when(
    as.character(`Benzene, toluene, ethyl benzene, xylenes mix`) == as.character(btex_sum) ~ "Y",
    TRUE ~ "N")) %>%
  # for instances where no provided sum of volatiles exists, use the calculated value
  mutate(`Benzene, toluene, ethyl benzene, xylenes mix` = case_when(
    is.na(`Benzene, toluene, ethyl benzene, xylenes mix`) ~ sum(Benzene,Ethylbenzene,Toluene,Xylene,`o-Xylene`,`m,p-Xylene`, na.rm = T),
    TRUE ~ `Benzene, toluene, ethyl benzene, xylenes mix`
  )) %>%
  select(activity_identifier,`Benzene, toluene, ethyl benzene, xylenes mix`) %>%
  rename(MEAN_result_measure_value = `Benzene, toluene, ethyl benzene, xylenes mix`) %>%
  mutate(characteristic_name = "Benzene, toluene, ethyl benzene, xylenes mix")


# 2.) extract a seperate dataframe of only volatiles from overall dataset
all_volatiles <- dat %>%
  filter(result_sample_fraction_text == "Volatile")

# 3.) Use this extracted dataset to match up with the aggregated dataset of volatiles only
mean_volatiles <- left_join(all_volatiles,btex_dat, by = c("activity_identifier","characteristic_name")) %>%
  # keep only the values from step 1
  filter(!is.na(MEAN_result_measure_value)) %>%
  select(-result_measure_value) %>%
  rename(result_measure_value = MEAN_result_measure_value)

# 4.) Use complete aggregated volatiles dataset to replace other volatiles info in overall dataset
dat <- dat %>%
  filter(is.na(result_sample_fraction_text) | result_sample_fraction_text != "Volatile") %>%
  # bind aggregated volatiles values back to verall dataset
  bind_rows(mean_volatiles)
  
# types of issues we addressed in preparing BTEX data
# - value exists only for total btex sum column (we left these as is)
# - no provided sum value exists, only calculated (we used the calculated value)

# hydrocarbons data should now be prepared in a format it can be plotted and assessed
```

<br>

## Nutrients (Nitrogen and Phosphorus)

```{r echo = F}
# TO DO - combine nitrogen names into single parameter!

# exploring nutrients data structure

# specify nutrients parameter names
nutrients_parameters <- c("Phosphorus","Inorganic nitrogen (nitrate and nitrite)","Nitrate")

# create nutrients dataframe
nutrients <- dat %>%
  filter(characteristic_name %in% nutrients_parameters)

# nitrogen only
nitrogen <- nutrients %>%
  filter(characteristic_name %in% c("Inorganic nitrogen (nitrate and nitrite)","Nitrate"))

# how many observations of "Nitrate"?
nitrate_count <- dat %>%
  filter(characteristic_name == "Nitrate") %>%
  count() %>%
  as.character()

# how many observations of "Inorganic nitrogen (nitrate and nitrite)"
inorganic_n_count <- dat %>%
  filter(characteristic_name == "Inorganic nitrogen (nitrate and nitrite)") %>%
  count() %>%
  as.character()

# make all N observations in to just "Nitrate" for characteristics name; see discussion below
dat <- dat %>%
  mutate(characteristic_name = case_when(
    characteristic_name == "Nitrate" ~ "Inorganic nitrogen (nitrate and nitrite)",
    TRUE ~ characteristic_name))


# note: there appears to be one instance where the analytical method for nitrogen is reported as 200.7(W). Obviously an error, fix it.

```

The following nurtient parameters names are present in the dataset:

-   "Phosphorus"
-   "Inorganic nitrogen (nitrate and nitrite)"
-   "Nitrate"

The previous reports on these data (Guerron Orejuela 2016 and McCard 2007) use only the terms "Nitrate" and "Phosphorus" to describe nutrients.

In our dataset, we have `r nitrate_count` observations of "Nitrate" and `r inorganic_n_count` observations of "Inorganic nitrogen (nitrate and nitrite)." Both of these parameters are reported to use the identical lab analytical method (4500-NO3(E)). For this report, will treat the two parameter names as indistinguishable, and data appears in the figure as such.

<br>

## Fecal Coliform Bacteria

A variety of fecal coliform standards are described in ADEC standards ([18 AAC 70](https://dec.alaska.gov/water/water-quality/standards/)). Fecal coliform bacteria may be assessed against criteria in two ways:

-   Instantaneous point values, where criteria are exceeded if 10% of samples are above threshold within a 30 day period
-   Geometic mean within a 30-day period

In this project, we collect only single samples on single days for each site. Thus, data are not structured to be assessed against existing state standards. In this report, we display two fixed threshold values for a) harvesting aquatic life and b) secondary recreation (contact with water), but it should be notes that single values above these lines do not represent regulatory exceedences.

-   helpful data to understand where/when more monitoring is needed
-   important to help understand spatial trends

Additional sampling beyond this project is needed to reasonably characterize bacteria conditions int he Kenai River, and several major efforts between 2010 - 2020 better achieved this. For more information and detailed reports on Kenai River bacteria monitoring, visit https://www.kenaiwatershed.org/other-water-research/ and click on "Bacteria Monitoring."

```{r echo = F}


# page 15 18 AAC https://www.epa.gov/system/files/documents/2023-05/akwqs-chapter70-2023.pdf

# see description/code for beach project: https://dec.alaska.gov/media/23091/kenai-river-beach-2020-final-report.pdf

# the horizontal lines are not appearing in the fecal coliform chapter for some reason, diagnose

```

<br>

## Total Suspended Solids

```{r echo = F}
# pg 22 https://www.epa.gov/system/files/documents/2023-05/akwqs-chapter70-2023.pdf


```

<br>

## Other Parameters

```{r echo = F}

# pH
# conductivity: no fixed standard
# temp: replace with discussion/reference to AKTEMP and modern literature
# turbidity: no fixed standard
# DO: not analysed in 2016 report



# following the template flow below , read in parameter thresholds FROM master sheet and format them to match existing column names (characteristic_name,	reg_unit,	Standard,	value)
# once there, join thresholds std tabel toble to reg_vals table in static plot fxn
# re-render to confirm working order


# read in pH threshold values
ph_reg_vals <- read_excel("other/input/regulatory_limits/master_reg_limits.xlsx", sheet = "static_regulatory_values") %>%
  remove_empty() %>%
  select(-parameter_agency_name) %>%
  filter(parameter_baseline_name == "pH") %>%
  select(-agency,-source,-special_note,-data_entry) %>%
  rename("characteristic_name" = "parameter_baseline_name",
         "value" = "reg_value",
         "Standard" = "standard_type")

# make downloadable list metals which have calculated parameters
dir <- "other/input/regulatory_limits/formatted_reg_vals/ph_reg_vals.csv"
write.csv(ph_reg_vals,dir, row.names = F)
embed_file(dir, text = "Download List of pH Regulatory Threshold Values")


```

```{r}
# end of script task: combine dataframes from all parameters evaluated against regulatory thresholds. export into "other/output/analysis_format", then source this table for the boxplot and table download functions

# Metals with Static Regulatory Threshold Values
## static_metals_thresholds

# Metals with Hardness-Dependent Regulatory Threshold Values
## hardness_dependent_metals_thresholds

# Hydrocarbons
## 

# Nutrients

# Bacteria

# Total suspended solids

# Field parameters

# this data below has been modified as described above to ensure compatibility between parameter dimensions and evaluation standards
write.csv(dat,"other/output/analysis_format/baseline_analysis_format.csv", row.names = F)

```
