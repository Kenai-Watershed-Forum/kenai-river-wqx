# Regulatory Limits

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

```{r packages, echo = F, warning=FALSE, message=FALSE}

# clear environment
rm(list=ls())

# load packages
library(tidyverse)
library(janitor)
library(readxl)
library(xfun)
```

We calculated regulatory limits based on freshwater quality standards listed from state and federal regulatory agencies. Some regulatory threshold values are static and do not depend on additional environmental parameters, while some threshold values depend on local conditions like hardness, temperature, or pH.

We discuss how various parameters are assessed against standards below.

## Metals

### Metals with Static Regulatory Threshold Values

The metals parameters in the downloadable table below have *static* thresholds assigned.

[Static regulatory values are represented as solid horizontal lines in the parameter-specific chapters that follow.]{.underline} (to do: show graphic example of values above horizontal line here)

```{r echo = F}

# read in reg threshold values for metals with static values
static_metals_reg_vals <- read_xlsx("other/input/regulatory_limits/master_reg_limits.xlsx", sheet = "static_regulatory_values") %>%
  filter(!is.na(agency),
         standard_type %in% c("drinking_water","irrigation_water","stock_water")) %>%
  remove_empty() %>%
  select(parameter_baseline_name,standard_type,reg_value,reg_unit) %>%
  pivot_wider(names_from = standard_type, values_from = reg_value) %>%
  rename(characteristic_name = parameter_baseline_name) %>%
  pivot_longer(cols = ends_with("water"), names_to = "standard", values_to = "value") %>%
  rename("Standard" = "standard")

# define directory
dir <- "other/input/regulatory_limits/formatted_reg_vals/static_metals_reg_vals.csv"

# export csv
write.csv(static_metals_reg_vals, dir, row.names = F)

# make table viewable
embed_file(dir, text = "Download Regulatory Limits for Metals with Static Regulatory Threshold Values")
```

```{r}
# read in static reg values in wide format
static_metals_reg_vals <- read_xlsx("other/input/regulatory_limits/master_reg_limits.xlsx", sheet = "static_regulatory_values") %>%
  filter(static_category == "static_metals",
         standard_type %in% c("drinking_water","irrigation_water","stock_water")) %>%
  remove_empty() %>%
  select(parameter_baseline_name,standard_type,reg_value,reg_unit,agency,source) %>%
  pivot_wider(names_from = standard_type, values_from = reg_value) %>%
  rename(characteristic_name = parameter_baseline_name,
         reg_agency = agency,
         reg_agency_source = source) 

# source formatted data
dat <- read.csv("other/output/analysis_format/baseline_analysis_format.csv")
  

# join static regulatory values to parameter results, and identify when/where exceedences occur
static_metals_thresholds <- left_join(dat,static_metals_reg_vals) %>%
  mutate(drinking_water_exceed = case_when(
    drinking_water >= result_measure_value ~ "Y")) |>
  mutate(stock_water_exceed = case_when(
    stock_water >= result_measure_value ~ "Y")) |>
  mutate(irrigation_water_exceed = case_when(
    irrigation_water >= result_measure_value ~ "Y")) 

```

### Metals with Hardness-Dependent Regulatory Values

Some regulatory values for metals are not simple static values, and are instead hardness-dependent (i.e. toxicity depends on calcium (Ca) and magnesium (Mg) concentrations). The metals parameters in the downloadable table below have *hardness-dependent* thresholds assigned.

```{r}


# hardness-dependent criteria
# see page 29 of "Alaska Water Quality Criteria Manual for Toxic and other Deleterious Organic and Inorganic Substances" for parameters and formulas

# read in parameters which have hardness dependent criteria
diss_metals_hard_param <- read_excel("other/input/regulatory_limits/master_reg_limits.xlsx", skip = 1, sheet = "diss_metals_hard_parameters") %>%
  remove_empty() %>%
  select(-parameter_agency_name) %>%
  filter(!is.na(characteristic_name),
         !is.na(m_a))

# make downloadable list metals which have calculated parameters
dir <- "other/input/regulatory_limits/formatted_reg_vals/calculated_metals_list.csv"
write.csv(diss_metals_hard_param,dir, row.names = F)
embed_file(dir, text = "Download List of Metals with Hardness-Dependent Regulatory Threshold Values")

```

<br>

Hardness varies by site, by season, and with hydrologic conditions. We calculated hardness according to the following formula:

::: {.callout-note appearance="simple"}
Hardness = 2.497(Total Calcium in mg/L) + 4.119(Total Magnesium in mg/L)
:::

For sampling events with duplicate samples, we calculated average hardness.

```{r echo = F, warning=FALSE, message=FALSE}

# calculate hardness for all sample events in project history with available data

# source formatted data
dat <- read.csv("other/output/analysis_format/baseline_analysis_format.csv")

# calculate hardness column  
hard <- dat %>%
  select(activity_identifier, activity_start_date, characteristic_name, result_measure_value, result_measure_measure_unit_code,monitoring_location_name) %>%
  filter(characteristic_name %in% (c("Magnesium","Calcium"))) %>%
  group_by(activity_identifier, activity_start_date, characteristic_name, result_measure_measure_unit_code,monitoring_location_name) %>%
  # get mean of all duplicate samples
  summarise(avg_value = mean(result_measure_value)) %>%
  pivot_wider(names_from = "characteristic_name", values_from = "avg_value") %>%
  mutate(hardness_mgl = 2.497*(Calcium) + 4.119*(Magnesium)) %>%
  ungroup() %>%
  select(-Calcium, -Magnesium,-result_measure_measure_unit_code)

# join hardness back to overall dataset
dat <- full_join(dat,hard,by = c("activity_identifier","activity_start_date","monitoring_location_name")) 

# spent inordinate time debugging the following join issue here: we can't include hardness units as a join column becuase some parameters have units other than mg/l

# export hardness joined to overall data results
dir <- "other/output/hardness/dat_hardness.csv"
write.csv(dat, dir, row.names = F)

# make hardness data downloadable
xfun::embed_file(dir, name = "Kenai River Baseline Hardness Data")

```

<br>

#### Acute and Chronic Hardness-Dependent Regulatory Threshold Values

Separate hardness-dependent standards often apply for acute vs. chronic metals toxicity.

We calculated hardness-dependent regulatory criteria based on formulas published on the Alaska Department of Environmental Conservation's Water Quality Standards Section website (<https://dec.alaska.gov/water/water-quality/standards/>). The "Alaska Water Quality Criteria Manual for Toxic and other Deleterious Organic and Inorganic Substances" (2022) document, along with the "Inorganic Toxics Criteria Worksheet" provide parameter-specific formulas for many substances.

Hardness-dependent criteria is calculated from the following formula for metals in freshwater:

::: {.callout-note appearance="simple"}
Acute (dissolved) = exp{mA\[ln(hardness)\]+ bA} (CF) Chronic (dissolved) = exp{mC \[ln(hardness)\] + bC} (CF)
:::

where mA, bA, mC, and bC are numerical parameters specific to each substance, and CF is the conversion factor for acute vs. chronic criteria.

These values are graphically displayed in the following chapters. Rather than juxtaposed against static horizontal lines, instead they are highlighted by shape or color when the calculated threshold is exceeded; specific to that sampling event's hardness conditions. See **figure X** for an example

**(to do: show graphic example of values above threshold as colored asterisks here)**

```{r echo = F}

# reduce overall dataset to just metals with hardness-dependent parameters
dat_metals_hard_dependent <- dat %>%
  filter(characteristic_name %in% c("Cadmium","Chromium","Copper","Lead","Nickel","Silver","Zinc"))

# join calculation parameters to overall dataset
hardness_dependent_metals_thresholds <- full_join(dat_metals_hard_dependent, diss_metals_hard_param, by = "characteristic_name") %>%

  # Calculate hardness dependent criteria values
  
  ## ACUTE ##
  mutate(fw_acute_std = case_when(
    # cadmium
    characteristic_name == "Cadmium" ~ exp(m_a*log(hardness_mgl) + b_a) * (1.136672 - ((log(hardness_mgl)*0.041838))),
    # lead
    characteristic_name == "Lead" ~ exp(m_a*log(hardness_mgl) + b_a) * (1.46203 - ((log(hardness_mgl)*0.145712))),
    # all other acute hardness-dependent criteria
    .default = exp(m_a*log(hardness_mgl) + b_a)
  )) %>%
  
  ## CHRONIC ##
  mutate(fw_chronic_std = case_when(
    # cadmium
    characteristic_name == "Cadmium" ~ exp(m_c*log(hardness_mgl) + b_c) * (1.101672 - ((log(hardness_mgl)*0.041838))),
    # lead 
    characteristic_name == "Lead" ~ exp(m_c*log(hardness_mgl) + b_c) * (1.46203 - ((log(hardness_mgl)*0.145712))),
    # all other hardness-dependent criteria
    .default = exp(m_c*log(hardness_mgl) + b_c))) %>%
  
# retain and rename needed columns
# select(characteristic_name, activity_start_date,result_sample_fraction_text,result_measure_value,result_measure_measure_unit_code)

#trib_mainstem, tributary_name, site_name, season, fw_acute_std, fw_chronic_std) %>%
  
  
  # note that all dissolved metals units are in ug/l, and all hardness units are in mg/l; as provided in the ADEC spreadsheet referenced earlier in this document (toxicsbook-adec-wqstandards-01-11-24)
  
  # calculate when exceedences occur
  ## acute
  mutate(fw_acute_exceed = case_when(
    result_measure_value >= fw_acute_std ~ "Y")) %>%
  
  ## chronic
  mutate(fw_chronic_exceed = case_when(
    result_measure_value >= fw_chronic_std ~ "Y")) 

# note: there is certainly a cleaner way to code the above, but for now am just reflecting the formula format as provided in the ADEC manual.


# define directory
dir <- "other/input/regulatory_limits/formatted_reg_vals/calculated_metals_reg_vals.csv"

# write csv of results
write.csv(hardness_dependent_metals_thresholds, dir, row.names = F)

# make csv downloadable
embed_file(dir, text = "Hardness Dependent Regulatory Thresholds for Metals - Kenai River Baseline Water Quality")

# it appears that export from EPA WQX of 2000 - 2014 data does not include status of samples as DUP or Trip Blank. Are results included at all? Also note that from Summer 2022 - present we are also using field blanks

# 11/16/23 working here to set up formulas for calculated criteria, see spreadsheet other/input/regulatory_limits

# 1.) read in static reg values
# 2.) calculate acute values
# 3.) calculate chronic values
# 4.) calculate other condition-dependent values (e.g. temp)
  
```

```{r}
# possible general approach for graphic plots: export sheets of static and hardness-dependent results; use this to intake for all figures
```

<br>

## Hydrocarbons

Note: the 2016 baseline report presents hydrocarbon data chapters structured as follows:

-   Diesel Range Organics

-   Gasoline Range Organics

-   Residual Range Organics

However, as of `r Sys.Date()` it is unclear which specific hydrocarbon parameters, or grouped sums of parameters, have equivalent names in our data set downloaded from the EPA WQX. As a result, in this report we will structure data to simply assess BTEX values against the ADEC regulatory standard. There may be federal standards that also apply, to be addressed later.

```{r echo = F}

# prepare static threshold reg value for BTEX
hydrocarbon_reg_vals <- read_xlsx("other/input/regulatory_limits/master_reg_limits.xlsx", sheet = "static_regulatory_values") %>%
  filter(static_category == "hydrocarbons") %>%
  remove_empty() %>%
  select(parameter_baseline_name,standard_type,reg_value,reg_unit) %>%
  pivot_wider(names_from = standard_type, values_from = reg_value) %>%
  rename(characteristic_name = parameter_baseline_name) %>%
  pivot_longer(cols = ends_with("water"), names_to = "standard", values_to = "value") %>%
  rename("Standard" = "standard") %>%
  filter(!is.na(value)) %>%
  select(-"NA")

# define directory
dir <- "other/input/regulatory_limits/formatted_reg_vals/hydrocarbon_reg_vals.csv"

# export csv
write.csv(hydrocarbon_reg_vals, dir, row.names = F)

# make table viewable
embed_file(dir, text = "Download Regulatory Limits for Hydrocarbons with Static Regulatory Threshold Values")

```

### Total BTEX

Total aromatic hydrocarbons (TAH) means the sum of the following volatile monoaromatic hydrocarbon compounds: benzene, toluene, ethylbenzene, and the xylene isomers, commonly called BTEX. The Alaska Dept of Environmental Conversation describes a maximum static regulatory value of 10 ug/l BTEX..

For each sampling event with available data, we calculated the sum of the parameters that compose BTEX and compared them to a static threshold value.

To prepare our existing data to be assessed against this standard, we addressed the following issues:

-   In some cases, BTEX is quantified as a total mixture. In other cases, the individual substances are quantified separately. 

-   In yet other cases, both the individual values and the total mixture values are reported separately. 

-   To create a consistent parameter, we summed the total quantities of benzene, toluene, ethylbenzene, and xylene by unique sampling event (unique location/time) when it had not already been reported as such.

-   In some cases, multiple isomers of the same hydrocarbon are quantified (e.g. o-xylene vs m,p-xylene). In these cases, we summed the total quantity of the substance for all isomers.

```{r echo = F}

xylene_isomers <- c("m,p-Xylene" = "Xylene","o-Xylene" = "Xylene")


# reconsider the approach below, as it it removes all associated info. try something that grepl select for containing "xylene"?


# Step 1: Aggregate "Volatile" rows
volatile_summary <- dat %>%
  filter(result_sample_fraction_text == "Volatile") %>%
  group_by(activity_identifier, result_sample_fraction_text) %>%
  summarise(
    result_measure_value = sum(result_measure_value, na.rm = TRUE),
    .groups = "drop"
  )

# Step 2: Combine with non-volatile rows
z <- dat %>%
  filter(result_sample_fraction_text != "Volatile") %>%
  bind_rows(volatile_summary)









btex_dat <- dat %>%
  filter(result_sample_fraction_text == "Volatile") %>%
  select(activity_identifier,characteristic_name,result_measure_value) %>%
  # round all values to two decimals
  mutate(result_measure_value = round(result_measure_value,2)) %>%
    # if duplicate samples exist, take their average
  group_by(activity_identifier,characteristic_name) %>%
  summarise(result_measure_value = mean(result_measure_value)) %>%
   # 
  pivot_wider(names_from = "characteristic_name", values_from = "result_measure_value") %>%
  mutate(btex_sum = sum(Benzene,Ethylbenzene,Toluene,Xylene,`o-Xylene`,`m,p-Xylene`, na.rm = T)) %>%
  # does the reported sum match the calculated sum?
  mutate(match = case_when(
    as.character(`Benzene, toluene, ethyl benzene, xylenes mix`) == as.character(btex_sum) ~ "Y",
    TRUE ~ "N")) %>%
  # for instances where no provided sum of volatiles exists, use the calculated value
  mutate(`Benzene, toluene, ethyl benzene, xylenes mix` = case_when(
    is.na(`Benzene, toluene, ethyl benzene, xylenes mix`) ~ sum(Benzene,Ethylbenzene,Toluene,Xylene,`o-Xylene`,`m,p-Xylene`, na.rm = T),
    TRUE ~ `Benzene, toluene, ethyl benzene, xylenes mix`
  )) %>%
  select(activity_identifier,`Benzene, toluene, ethyl benzene, xylenes mix`) %>%
  rename(result_measure_value = `Benzene, toluene, ethyl benzene, xylenes mix`) %>%
  mutate(characteristic_name = "Benzene, toluene, ethyl benzene, xylenes mix")

# types of issues addressed in preparing BTEX data

# - value exists only for provided sum column (we left these as is)
# - no provided sum value exists, only calculated (we used the calculated value)


# next, replace old volatiles data in the overall dataframe with the dataframe above. rejoin to site info. 

## filter out old volatiles data from overall data



# next, to read this data source in separately for boxplots, try using case_when within read.csv to choose one of two data sources
  


```

<br>

## Nutrients (Nitrogen and Phosphorus)

```{r echo = F}

# The parameters in the existing dataset cover two names: 1.) "Inorganic nitrogen (nitrate and nitrite)" and 2.) "Nitrate"

# 2016 report: "inorganic nitrogen is generally present in well-aerated, natural streams in the form of nitrate (Glass, 1999)."

# just different names for the same parameter?

```

<br>

## Bacteria

```{r echo = F}

# page 15 18 AAC https://www.epa.gov/system/files/documents/2023-05/akwqs-chapter70-2023.pdf

# see description/code for beach project: https://dec.alaska.gov/media/23091/kenai-river-beach-2020-final-report.pdf



```

<br>

## Total Suspended Solids

```{r echo = F}

# pg 22 https://www.epa.gov/system/files/documents/2023-05/akwqs-chapter70-2023.pdf


```

<br>

## Other Parameters

```{r echo = F}

# pH
# conductivity: no fixed standard
# temp: replace with discussion/reference to AKTEMP and modern literature
# turbidity: no fixed standard
# DO: not analysed in 2016 report



# following the template flow below , read in parameter thresholds FROM master sheet and format them to match existing column names (characteristic_name,	reg_unit,	Standard,	value)
# once there, join thresholds std tabel toble to reg_vals table in static plot fxn
# re-render to confirm working order


# read in pH threshold values
ph_reg_vals <- read_excel("other/input/regulatory_limits/master_reg_limits.xlsx", sheet = "static_regulatory_values") %>%
  remove_empty() %>%
  select(-parameter_agency_name) %>%
  filter(parameter_baseline_name == "pH") %>%
  select(-agency,-source,-special_note,-data_entry) %>%
  rename("characteristic_name" = "parameter_baseline_name",
         "value" = "reg_value",
         "Standard" = "standard_type")

# make downloadable list metals which have calculated parameters
dir <- "other/input/regulatory_limits/formatted_reg_vals/ph_reg_vals.csv"
write.csv(ph_reg_vals,dir, row.names = F)
embed_file(dir, text = "Download List of pH Regulatory Threshold Values")




```

```{r}
# end of script task: combine dataframes from all parameters evaluated against regulatory thresholds. export into "other/output/analysis_format", then source this table for the boxplot and table download functions

# Metals with Static Regulatory Threshold Values
## static_metals_thresholds

# Metals with Hardness-Dependent Regulatory Threshold Values
## hardness_dependent_metals_thresholds

# Hydrocarbons
## 

# Nutrients

# Bacteria

# Total suspended solids

# Field parameters

```
